// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace EccomerceAutomationTest.specs.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class PlaceOrderFeature : object, Xunit.IClassFixture<PlaceOrderFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "PlaceOrder.feature"
#line hidden
        
        public PlaceOrderFeature(PlaceOrderFeature.FixtureData fixtureData, EccomerceAutomationTest_specs_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "PlaceOrder", "As a user I want to able to place one or several orders", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="As a user i want to order a valid product")]
        [Xunit.TraitAttribute("FeatureTitle", "PlaceOrder")]
        [Xunit.TraitAttribute("Description", "As a user i want to order a valid product")]
        [Xunit.TraitAttribute("Category", "Placing_Orders")]
        [Xunit.TraitAttribute("Category", "Chrome")]
        public void AsAUserIWantToOrderAValidProduct()
        {
            string[] tagsOfScenario = new string[] {
                    "Placing_Orders",
                    "Chrome"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("As a user i want to order a valid product", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 testRunner.Given("User is logs in with Email_Address \"demouser@microsoft.com\" and Password \"Pass@wo" +
                        "rd1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.And("User is on Homepage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
 testRunner.When("User searches in Brand \"All\" and Type \"All\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Item Name",
                            "Quantity"});
                table1.AddRow(new string[] {
                            ".NET BLACK & WHITE MUG",
                            "4"});
#line 10
 testRunner.And("User selects items with quantities", ((string)(null)), table1, "And ");
#line hidden
#line 13
 testRunner.And("the order is placed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
 testRunner.Then("a confirmation message is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 15
 testRunner.And("the items appear in my orders section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="As a user i want to order an invalid quantity of product")]
        [Xunit.TraitAttribute("FeatureTitle", "PlaceOrder")]
        [Xunit.TraitAttribute("Description", "As a user i want to order an invalid quantity of product")]
        [Xunit.TraitAttribute("Category", "Edge")]
        public void AsAUserIWantToOrderAnInvalidQuantityOfProduct()
        {
            string[] tagsOfScenario = new string[] {
                    "Edge"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("As a user i want to order an invalid quantity of product", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 18
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 19
 testRunner.Given("User is logs in with Email_Address \"demouser@microsoft.com\" and Password \"Pass@wo" +
                        "rd1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 20
 testRunner.And("User is on Homepage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
 testRunner.When("User searches in Brand \"All\" and Type \"All\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Item Name",
                            "Quantity"});
                table2.AddRow(new string[] {
                            ".NET BLACK & WHITE MUG",
                            "-4"});
#line 22
 testRunner.And("User selects items with quantities", ((string)(null)), table2, "And ");
#line hidden
#line 25
 testRunner.And("the order is placed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
 testRunner.Then("a confirmation message is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 27
 testRunner.And("the items are ordered with a quatity of one", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
 testRunner.And("the items appear in my orders section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="As a user i want to order several valid products")]
        [Xunit.TraitAttribute("FeatureTitle", "PlaceOrder")]
        [Xunit.TraitAttribute("Description", "As a user i want to order several valid products")]
        [Xunit.TraitAttribute("Category", "Edge")]
        public void AsAUserIWantToOrderSeveralValidProducts()
        {
            string[] tagsOfScenario = new string[] {
                    "Edge"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("As a user i want to order several valid products", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 31
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 32
 testRunner.Given("User is logs in with Email_Address \"demouser@microsoft.com\" and Password \"Pass@wo" +
                        "rd1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 33
 testRunner.And("User is on Homepage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 34
 testRunner.When("User searches in Brand \"All\" and Type \"All\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Item Name",
                            "Quantity"});
                table3.AddRow(new string[] {
                            ".NET BLACK & WHITE MUG",
                            "4"});
                table3.AddRow(new string[] {
                            ".NET BLUE SWEATSHIRT",
                            "5"});
                table3.AddRow(new string[] {
                            "PRISM WHITE TSHIRT",
                            "2"});
                table3.AddRow(new string[] {
                            "CUP<T> SHEET",
                            "3"});
#line 35
 testRunner.And("User selects items with quantities", ((string)(null)), table3, "And ");
#line hidden
#line 41
 testRunner.And("the order is placed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 42
 testRunner.Then("a confirmation message is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 43
 testRunner.And("the items appear in my orders section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                PlaceOrderFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                PlaceOrderFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
